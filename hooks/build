#!/bin/bash
set -e +x

echo "### Run advanced ###"

function qemu(){
  echo "=> enable quemu"
  docker run --rm --privileged multiarch/qemu-user-static:register --reset
}

function manifest(){
  echo "=> install manifest-tool"
  local URL=https://github.com/estesp/manifest-tool/releases/download/v0.6.0/manifest-tool-linux-amd64
  curl -sLo ./manifest-tool "${URL}"
  chmod +x ./manifest-tool
}

function multiarch(){
echo "=> push multiarch ${DOCKER_REPO}:${VERSION}"

cmd="./manifest-tool push from-args \
--platforms ${ARCHS} \
--template ${DOCKER_REPO}:${VERSION}-ARCH \
--target ${DOCKER_REPO}:${VERSION}"

#echo ${cmd}
eval ${cmd}
}

function get_qemu(){
  local df_path="${1}"
  echo "=> get qemu binary"
  local URL="https://github.com/multiarch/qemu-user-static/releases/download/v2.9.1/qemu-arm-static.tar.gz"
  curl -sL "${URL}" | tar -xzC "${df_path}"
}

function get_traefik(){
  local df_path="${1}"
  echo "=> get traefik binary"
  local URL="https://github.com/containous/traefik/releases/download/v${VERSION}/traefik_linux-${ARCH}"
  curl -sLo "${df_path}/traefik" "${URL}"
  chmod +x "${df_path}/traefik"
}

function info(){
local folder="${1}"
ARCH=$(basename "${folder}")
VERSION=$(basename "$(dirname "${folder}")")
echo "=> info arch=${ARCH} version=${VERSION}"
}

#################################

qemu
manifest

ARCHS="linux/arm,linux/amd64"

for df in $(find . -type f -name 'Dockerfile*');
do
  df_path=$(dirname "${df}")
  if [[ "${df_path}" != "." ]]; then
    info "${df_path}"
    get_traefik "${df_path}"
    if [[ "$ARCH" == "arm" ]]; then
      get_qemu "${df_path}"
    fi
    
    echo "=> Building ${DOCKER_REPO}:${VERSION}-${ARCH}"
    docker image build -t "${DOCKER_REPO}:${VERSION}-${ARCH}" -f "${df}" "${df_path}"
    docker image push "${DOCKER_REPO}:${VERSION}-${ARCH}"
  fi
done

for df in $(find . -type f -name 'Dockerfile*');
do
  df_path=$(dirname "${df}")
  if [[ "${df_path}" != "." ]]; then
    info "${df_path}"
    if [[ $(docker image ls --filter reference=${DOCKER_REPO}:${VERSION}* | grep -cv CREATED) -gt 1 ]]; then
      echo "=> Building multiarch for ${VERSION}"
      multiarch  
    fi 
  fi
done

latest="$(ls -1d */ |sort -d -r | grep -v hooks|  head -n 1 | cut -f1 -d'/')"
echo "=> Build latest version: ${latest}"

cmd="./manifest-tool \
push from-args \
--platforms ${ARCHS} \
--template ${DOCKER_REPO}:${latest}-ARCH \
--target ${DOCKER_REPO}:latest"

#echo ${cmd}
eval ${cmd}
